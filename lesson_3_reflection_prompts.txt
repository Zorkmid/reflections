When would you want to use a remote repository rather than keeping all your work local?

1. When you don't have access to your main computer and need to update the repository
using a web interface.
2. When collaborating with another author making updates to a shared document or adding
files to a shared repository.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

Gives the owner of the repository fine grained control over the contents.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are clones that are created using the processes native to GitHub.  The source repository
keeps track of the number of forks made.  There is a GitHub mechanism for proposing changes
made to a fork be merged into the orignal source repository.

Clones are copies of a repository which contains all the commit history for the branch chosen.

A branch exists within a repository to isolate and test changes before incorporating them
into the master tip.

Forks are typically used when a developer has no rights to modify the source repository.
Changes may be incorporated into the source repository at the discretion of the owner.

Clones are made to facilitate development by duplicating the repository in a development
environment.

What is the benefit of having a copy of the last known state of the remote stored locally?

The local copy acts as a proxy for the remote to handle situations where the remote is
unreachable.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Manual collaboration might involve sending file changes via e-mail or maintaining separate
directories on a network with separate copies of the source code.  Periodic comparisons of
the directories might be performed to find differences.  There would be no history nor
explanations for the various changes.  It would be chaotic and error prone.  Git/GitHub provides
a running history of changes and mechanisms for combining changes.  Merging would be difficult
with either approach, but Git provides a solid, consistent rationale and approach.
